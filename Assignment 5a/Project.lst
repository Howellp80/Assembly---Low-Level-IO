Microsoft (R) Macro Assembler Version 14.00.23918.0	    08/08/16 10:49:27
+LowLevelIOProcedures     (Assignment5a.asm		     Page 1 - 1


				TITLE LowLevelIOProcedures     (Assignment5a.asm)

				; Author: Parker Howell
				; Course / Project ID      CS271 Assignment 5a            
				; Date: 8-6-16
				; Description: The program will take 10 integers as string input, convert them to decimal values, 
				;              display them. Additionally the sum and average will be calculated and displayed 
				;              as strings.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000A			MAX = 10       ; amount of strings to process and store as decimal values
 = 00000030			LOCHAR = 48    ; ascii equivalent of 0. input should not be lower
 = 00000039			HICHAR = 57    ; ascii equivalent of 9. input should not be higher


 00000000			.data

 00000000  0000000A [		valArray   DWORD  MAX DUP (?)   ; array to hold validated decimal user input
	    00000000
	   ]
 00000028 00000000		index      DWORD  0             ; tracks index location of valArray
 0000002C 00000000		arrSum     DWORD  ?             ; total sum of valArray values
 00000030 00000000		arrAvg     DWORD  ?             ; average of arrSum

 00000034 48 65 6C 6C 6F	intro      BYTE     "Hello, and welcome to Parker Howell's assignment 5(a),",0dh,0ah
	   2C 20 61 6E 64
	   20 77 65 6C 63
	   6F 6D 65 20 74
	   6F 20 50 61 72
	   6B 65 72 20 48
	   6F 77 65 6C 6C
	   27 73 20 61 73
	   73 69 67 6E 6D
	   65 6E 74 20 35
	   28 61 29 2C 0D
	   0A
 0000006C  44 65 73 69 67	           BYTE     "Designing low-level I/O procedures program!", 0
	   6E 69 6E 67 20
	   6C 6F 77 2D 6C
	   65 76 65 6C 20
	   49 2F 4F 20 70
	   72 6F 63 65 64
	   75 72 65 73 20
	   70 72 6F 67 72
	   61 6D 21 00
 00000098 50 6C 65 61 73	instruct   BYTE     "Please provide 10 unsigned decimal integers.",0dh,0ah
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 75 6E
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 2E 0D
	   0A
 000000C6  45 61 63 68 20	           BYTE     "Each number needs to be small enough to fit inside a 32 bit register.",0dh,0ah
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A
 0000010D  41 66 74 65 72	           BYTE     "After you have finished inputting the raw numbers I will display a list",0dh,0ah
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 0D 0A
 00000156  6F 66 20 74 68	           BYTE     "of the integers, their sum, and their average value.", 0
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 00
 0000018B 50 6C 65 61 73	prompt     BYTE     "Please enter an unsigned number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 75 6E 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 3A 20 00
 000001AD 45 52 52 4F 52	error      BYTE     "ERROR: You did not enter an unsigned number or your number was too big.", 0dh,0ah, 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 75 6E
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 6F
	   72 20 79 6F 75
	   72 20 6E 75 6D
	   62 65 72 20 77
	   61 73 20 74 6F
	   6F 20 62 69 67
	   2E 0D 0A 00
 000001F7 59 6F 75 20 65	display    BYTE     "You entered the following numbers: ", 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 0000021B 2C 20 00		space      BYTE     ", ", 0
 0000021E 54 68 65 20 73	sum        BYTE     "The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 0000023C 54 68 65 20 61	avg        BYTE     "The average is: ", 0
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 0000024D 59 61 79 20 66	bye        BYTE     "Yay for I/O!   Bye!", 0
	   6F 72 20 49 2F
	   4F 21 20 20 20
	   42 79 65 21 00



				; * MACROS *

				;************************************************************************
				getString MACRO array
				; Macro to store a atring from standard input into an array
				; receives: array argument
				; returns: string stored in array with size of string in EAX
				; preconditions: none
				; registers changed: edx, ecx, eax
				;************************************************************************
				     push      ecx
				     push      edx
				     mov       edx, array     ; EDX points to array
				     mov       ecx, 50        ; max amount of bytes to store
				     call      ReadString     ; store entered string
				     pop       edx
				     pop       ecx
				ENDM




				;************************************************************************
				displayString MACRO str
				; Macro to write a string at the passed in argument location
				; receives: str argument pointing to a string address
				; returns: prints string at str address
				; preconditions: str argument is valid
				; registers changed: edx
				;************************************************************************
				     push      edx
				     mov       edx, str       ; EDX = address of str
				     call      WriteString    ; prints str string to console
				     pop       edx
				ENDM


				; * END OF MACROS *



				;************************************************************************
				;  MAIN
				;************************************************************************
 00000000			.code
 00000000			main PROC

 00000000  E8 00000000 E	     call   Clrscr             ; clears the screen

 00000005  E8 0000006B		     call   introduction       ; introduces program

 0000000A  68 00000000 R	     push   OFFSET   valArray  ; to store valid strings as decimals
 0000000F  68 00000028 R	     Push   OFFSET   index     ; to track place in valArray
 00000014  E8 00000082		     call   readVal            ; gets and validates user data
				                                        
 00000019  68 00000000 R	     push   OFFSET   valArray  ; add array pointer to stack
 0000001E  68 000001F7 R	     push   OFFSET   display   ; add Msg pointer to stack
 00000023  68 0000021B R	     push   OFFSET   space     ; for formatting
 00000028  E8 00000103		     call   printArray         ; prints the array

 0000002D  68 00000000 R	     push   OFFSET   valArray  ; add array pointer to stack
 00000032  68 0000002C R	     push   OFFSET   arrSum    ; to store the array sum
 00000037  E8 0000013B		     call   sumArr             ; sums the elements in valArray

 0000003C  68 0000002C R	     push   OFFSET  arrSum     ; pointer to sum of array
 00000041  68 0000021E R	     push   OFFSET  sum        ; add Msg pointer to stack
 00000046  E8 0000015C		     call   writeVal           ; displays the sum of elements in valArray

 0000004B  68 0000002C R	     push   OFFSET  arrSum     ; pointer to sum of array
 00000050  68 00000030 R	     push   OFFSET  arrAvg     ; pointer to averaage of array
 00000055  E8 000001A8		     call   getAvg             ; calculates the average of values in valArray

 0000005A  68 00000030 R	     push   OFFSET  arrAvg     ; pointer to average of array
 0000005F  68 0000023C R	     push   OFFSET  avg        ; add Msg pointer to stack
 00000064  E8 0000013E		     call   writeVal           ; displays the average of elements in valArray

 00000069  E8 000001B3		     call farewell             ; say goodbye

					exit	; exit to operating system
 0000006E  6A 00	   *	    push   +000000000h
 00000070  E8 00000000 E   *	    call   ExitProcess
 00000075			main ENDP




				;************************************************************************
				;  procedures below 
				;************************************************************************

				;************************************************************************
 00000075			introduction PROC
				; Procedure to introduce the program and author and display instructions.
				; receives: none
				; returns: intro and instructions printed to console
				; preconditions: none
				; registers changed: edx
				;************************************************************************
 00000075  60			     pushad
 00000076  BA 00000034 R	     mov       edx, OFFSET intro         ; prints intro to console
 0000007B  E8 00000000 E	     call      WriteString
 00000080  E8 00000000 E	     call      CrLf
 00000085  BA 00000098 R	     mov       edx, OFFSET instruct      ; prints instructions to console
 0000008A  E8 00000000 E	     call      WriteString
 0000008F  E8 00000000 E	     call      CrLf
 00000094  E8 00000000 E	     call      CrLf

 00000099  61			     popad
 0000009A  C3			     ret
 0000009B			introduction ENDP




				;************************************************************************
 0000009B			readVal PROC
				; Procedure to get and validate user entered strings. Store strings in  
				; valArr as decimal values.
				; receives: arguments for valArray and index variables
				; returns: valArray contains 10 decimal values within range
				; preconditions: above 2 arguments are valid
				; registers changed: ebx, ecx, esi, eax, edi, edx
				;************************************************************************
				     LOCAL     tempArr[50]:BYTE,      ; local array to store user string
				               total:DWORD            ; for converting char to dec
 0000009B  55		   *	    push   ebp
 0000009C  8B EC	   *	    mov    ebp, esp
 0000009E  83 C4 C8	   *	    add    esp, 0FFFFFFC8h
 000000A1  60			     pushad
 000000A2  8D 5D CE		     lea       ebx, tempArr           ; get the address of tempArr
				     
 000000A5  FC			     cld                              ; clear direction flag
 000000A6  B9 0000000A		     mov       ecx, MAX               ; set outer loop counter

 000000AB			input:
				     displayString  OFFSET prompt     ; ask user to enter a string value
 000000AB  52		     1	     push      edx
 000000AC  BA 0000018B R     1	     mov       edx, OFFSET prompt       ; EDX = address of str
 000000B1  E8 00000000 E     1	     call      WriteString    ; prints str string to console
 000000B6  5A		     1	     pop       edx
				     getString ebx                    ; put user entered value in tempArr
 000000B7  51		     1	     push      ecx
 000000B8  52		     1	     push      edx
 000000B9  8B D3	     1	     mov       edx, ebx     ; EDX points to array
 000000BB  B9 00000032	     1	     mov       ecx, 50        ; max amount of bytes to store
 000000C0  E8 00000000 E     1	     call      ReadString     ; store entered string
 000000C5  5A		     1	     pop       edx
 000000C6  59		     1	     pop       ecx
 000000C7  8B F3		     mov       esi, ebx               ; esi points to tempArr for validatoin
				                      
 000000C9  51			     push      ecx                    ; save outer loop counter
				     
 000000CA  83 F8 0A		     cmp       eax, MAX               ; check if string is too big
 000000CD  77 14		     ja        err 
 000000CF  8B C8		     mov       ecx, eax               ; inner loop = size of entered string
 000000D1  C7 45 C8		     mov       total, 0               ; clear accumulator
	   00000000

 000000D8			validate:
 000000D8  AC			     lodsb                            ; load byte of tempArr into al
 000000D9  3C 30		     cmp       al, LOCHAR             ; make sure entered byte is >= 0
 000000DB  72 06		     jb        err
 000000DD  3C 39		     cmp       al, HICHAR             ; make sure entered byte is <= 9
 000000DF  77 02		     ja        err

 000000E1  EB 0F		     jmp       goodByte               ; if byte is within range


 000000E3			err:                                 ; out of range or too large
				     displayString  OFFSET error     ; tell user string is not valid
 000000E3  52		     1	     push      edx
 000000E4  BA 000001AD R     1	     mov       edx, OFFSET error       ; EDX = address of str
 000000E9  E8 00000000 E     1	     call      WriteString    ; prints str string to console
 000000EE  5A		     1	     pop       edx
 000000EF  59			     pop       ecx                   ; restrore outer loop / align stack
 000000F0  EB B9		     jmp       input                 ; get a new string

				     ; the byte is in range 0-9
 000000F2			goodByte:                            ; convert string to decimal
				                                     ; using formula from lecture video 23 @ time 2:50
 000000F2  0F B6 F8		     movzx     edi, al               ; sign extend al into edx
 000000F5  83 EF 30		     sub       edi, LOCHAR           ; convert to dec       char - 48 = dec

 000000F8  B8 0000000A		     mov       eax, MAX              ; 10 * x from video
 000000FD  F7 65 C8		     mul       total            
 00000100  89 45 C8		     mov       total, eax            ; save in total
 00000103  01 7D C8		     add       total, edi

 00000106  E2 D0		     Loop      validate              ; for all bytes in the string


				     ; if we're here we have a valid string converted to Dec in total
				               
 00000108  53			     push      ebx                 ; save registers
 00000109  50			     push      eax

 0000010A  8B 7D 0C		     mov       edi, [ebp + 12]     ; edi points to valArray
 0000010D  8B 45 08		     mov       eax, [ebp + 8]      ; eax points to index
 00000110  8B 18		     mov       ebx, [eax]          ; ebx = index
 00000112  8B 4D C8		     mov       ecx, total          ; ecx = total
 00000115  89 0C 3B		     mov       [edi + ebx], ecx    ; save the valid Decimal
 00000118  BA 00000004		     mov       edx, 4
 0000011D  03 DA		     add       ebx, edx            ; increment index location
 0000011F  89 18		     mov       [eax], ebx          ; and save it in index variable

 00000121  58			     pop       eax                 ; restore registers
 00000122  5B			     pop       ebx

 00000123  59			     pop       ecx                    ; restore outer loop counter
 00000124  E2 85		     Loop      input                  ; repeat MAX amout of times
				    
 00000126  E8 00000000 E	     call      CrLf                   ; formatting

 0000012B  61			     popad
 0000012C  C9		   *	    leave  
 0000012D  C2 0008		     ret       8
 00000130			readVal ENDP





				;************************************************************************
 00000130			printArray PROC
				; Procedure to print the values in the array to the console 
				; receives: address of array pushed on stack
				;           address of userRands pushed on stack
				;           address of ArrayMsg1 pushed on stack
				; returns: prints contents of array to console 
				; preconditions: above 3 valid arguments are pushed on stack
				; registers changed: ebp, esi, ecx, edx, eax
				;************************************************************************
 00000130  55			     push      ebp               ; save old ebp
 00000131  8B EC		     mov       ebp, esp
 00000133  60			     pushad
 00000134  8B 75 10		     mov       esi, [ebp + 16]   ; esi points to array
 00000137  8B 55 0C		     mov       edx, [ebp + 12]   ; edx points to ArrayMsg

				     displayString edx           ; prints ArrayMsg to console
 0000013A  52		     1	     push      edx
 0000013B  8B D2	     1	     mov       edx, edx       ; EDX = address of str
 0000013D  E8 00000000 E     1	     call      WriteString    ; prints str string to console
 00000142  5A		     1	     pop       edx
 00000143  E8 00000000 E	     call      CrLf              ; formatting
				     
 00000148  B9 0000000A		     mov       ecx, MAX         ; set loop counter
 0000014D			printElement:                   ; printing loop
 0000014D  8B 06		     mov       eax, [esi]       ; get current element of array
 0000014F  E8 00000000 E	     call      WriteDec       

 00000154  83 F9 01		     cmp       ecx, 1           ; if its the last number dont print a comma
 00000157  76 0A		     jbe       noComma

				     displayString [ebp + 8]    ; print a comma and a space ", "
 00000159  52		     1	     push      edx
 0000015A  8B 55 08	     1	     mov       edx, [ebp + 8]       ; EDX = address of str
 0000015D  E8 00000000 E     1	     call      WriteString    ; prints str string to console
 00000162  5A		     1	     pop       edx
				    
 00000163			noComma:

 00000163  83 C6 04		     add       esi, 4         ; go to next element of array
 00000166  E2 E5		     loop      printElement
				     
 00000168  E8 00000000 E	     call      CrLf           ; formatting
 0000016D  E8 00000000 E	     call      CrLf

 00000172  61			     popad
 00000173  5D			     pop       ebp            ; restore ebp
 00000174  C2 000C		     ret       12
 00000177			printArray ENDP




				;************************************************************************
 00000177			sumArr PROC
				; Procedure to sum values in valArray
				; receives: arguments for valArray and arrSum
				; returns: sum of valArray in arrSum
				; preconditions: above arguments are valid
				; registers changed: ebx, esi, ecx, eax
				;************************************************************************
				     LOCAL     total:DWORD         ; for converting char to dec
 00000177  55		   *	    push   ebp
 00000178  8B EC	   *	    mov    ebp, esp
 0000017A  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000017D  60			     pushad
 0000017E  8D 5D FC		     lea       ebx, total          ; get the address of total
 00000181  8B 75 0C		     mov       esi, [ebp + 12]      ; esi points to valArray
 00000184  C7 45 FC		     mov       total, 0            ; set the accumulator     
	   00000000
 0000018B  B9 0000000A		     mov       ecx, MAX            ; set loop counter    

 00000190			addEle:
 00000190  8B 06		     mov       eax, [esi]          ; get array element       
 00000192  01 45 FC		     add       total, eax          ; sum total and array element
 00000195  83 C6 04		     add       esi, 4              ; next element
 00000198  E2 F6		     Loop      addEle              ; add all the elements of valArray

 0000019A  8B 45 08		     mov       eax, [ebp + 8]      ; eax points to arrSum variable
 0000019D  8B 4D FC		     mov       ecx, total          ; prep to save total
 000001A0  89 08		     mov       [eax], ecx          ; save total in EAX

 000001A2  61			     popad
 000001A3  C9		   *	    leave  
 000001A4  C2 0008		     ret       8
 000001A7			sumArr ENDP




				;************************************************************************
 000001A7			writeVal PROC
				; Procedure to print value passed in as a string to console
				; receives: pointer to value to print and pointer to display text
				; returns: prints display text to console followed by converted string value
				; preconditions: above two valid pointers are on stack
				; registers changed: ebx, ebp, edi, eax, ecx, edx
				;************************************************************************
				     LOCAL     tempArr[50]:BYTE      ; local array to store user string
 000001A7  55		   *	    push   ebp
 000001A8  8B EC	   *	    mov    ebp, esp
 000001AA  83 C4 CC	   *	    add    esp, 0FFFFFFCCh
 000001AD  8D 5D CE		     lea       ebx, tempArr           ; get the address of tempArr
 000001B0  60			     pushad
				     
				     displayString [ebp + 8]         ; output string
 000001B1  52		     1	     push      edx
 000001B2  8B 55 08	     1	     mov       edx, [ebp + 8]       ; EDX = address of str
 000001B5  E8 00000000 E     1	     call      WriteString    ; prints str string to console
 000001BA  5A		     1	     pop       edx
				     
 000001BB  8B FB		     mov       edi, ebx              ; edi points to tempArr
 000001BD  BB 00000032		     mov       ebx, SIZEOF tempArr   ; move pointer to end of tempArr...
 000001C2  03 FB		     add       edi, ebx
 000001C4  4F			     dec       edi                   ; esi points to last element of tempArr
 000001C5  FD			     std                             ; set the direction flag

 000001C6  B0 00		     mov       al, 0                 ; set last element of tempArr with 0
 000001C8  AA			     stosb

				     ; convert dec to string
 000001C9  8B 4D 0C		     mov       ecx, [ebp + 12]   ; EAX = number to convert to string
 000001CC  8B 01		     mov       eax, [ecx]
 000001CE  BB 0000000A		     mov       ebx, MAX          ; set divisor
 000001D3			divLoop:
 000001D3  BA 00000000		     mov       edx, 0         ; prep for div
 000001D8  F7 F3		     div       ebx            ; edx:eax / ebx
 000001DA  8B C8		     mov       ecx, eax       ; save eax val
 000001DC  83 C2 30		     add       edx, LOCHAR    ; convert to string val
 000001DF  8A C2		     mov       al, dl         ; move remainder in to al
 000001E1  AA			     stosb                    ; move al into next element of tempArr
 000001E2  8B C1		     mov       eax, ecx       ; restore eax

 000001E4  83 F8 00		     cmp       eax, 0         ; check if we need to div again
 000001E7  77 EA		     ja        divLoop

 000001E9  47			     inc       edi            ; point edi to first number in tempArr
				     displayString  edi       ; print out string value
 000001EA  52		     1	     push      edx
 000001EB  8B D7	     1	     mov       edx, edi       ; EDX = address of str
 000001ED  E8 00000000 E     1	     call      WriteString    ; prints str string to console
 000001F2  5A		     1	     pop       edx

 000001F3  E8 00000000 E	     call      CrLf           ; formatting
 000001F8  E8 00000000 E	     call      CrLf

 000001FD  61			     popad
 000001FE  C9		   *	    leave  
 000001FF  C2 0008		     ret       8
 00000202			writeVal ENDP




				;************************************************************************
 00000202			getAvg PROC
				; Procedure to find the average of the values in valArray
				; receives: pointer to sum of values in valArray and pointer to arrAvg variable
				; returns: the average is stored in arrAvg variable
				; preconditions: above two arguments are valid and on stack
				; registers changed: ebp, ecx, eax, edx, ebx
				;************************************************************************
 00000202  55			     push      ebp               ; save old ebp
 00000203  8B EC		     mov       ebp, esp
 00000205  60			     pushad

 00000206  8B 4D 0C		     mov       ecx, [ebp + 12]   ; EAX = number to average  
 00000209  8B 01		     mov       eax, [ecx]

 0000020B  BA 00000000		     mov       edx, 0            ; prep for div
 00000210  BB 0000000A		     mov       ebx, MAX          ; set divisor
 00000215  F7 F3		     div       ebx               ; EDX:EAX / EBX
 00000217  8B 5D 08		     mov       ebx, [ebp + 8]    ; EBX points to arrAvg variable
 0000021A  89 03		     mov       [ebx], eax        ; save the average

 0000021C  61			     popad
 0000021D  5D			     pop       ebp            ; restore ebp
 0000021E  C2 0008		     ret       8
 00000221			getAvg ENDP




				;************************************************************************
 00000221			farewell PROC
				; Procedure to say goodbye
				; receives: none
				; returns: prints bye message to console
				; preconditions: none
				; registers changed: edx
				;************************************************************************
 00000221  BA 0000024D R	     mov       edx, OFFSET bye     ; EDX points to bye message
 00000226  E8 00000000 E	     call      WriteString
 0000022B  E8 00000000 E	     call      CrLf                ; formatting
 00000230  E8 00000000 E	     call      CrLf

 00000235  C3			     ret
 00000236			farewell ENDP



				END main
Microsoft (R) Macro Assembler Version 14.00.23918.0	    08/08/16 10:49:27
+LowLevelIOProcedures     (Assignment5a.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000261 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000236 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 00000221 _TEXT	Length= 00000015 Public STDCALL
getAvg . . . . . . . . . . . . .	P Near	 00000202 _TEXT	Length= 0000001F Public STDCALL
introduction . . . . . . . . . .	P Near	 00000075 _TEXT	Length= 00000026 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000075 Public STDCALL
printArray . . . . . . . . . . .	P Near	 00000130 _TEXT	Length= 00000047 Public STDCALL
  printElement . . . . . . . . .	L Near	 0000014D _TEXT	
  noComma  . . . . . . . . . . .	L Near	 00000163 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 0000009B _TEXT	Length= 00000095 Public STDCALL
  tempArr  . . . . . . . . . . .	Byte	 bp - 00000032
  total  . . . . . . . . . . . .	DWord	 bp - 00000038
  input  . . . . . . . . . . . .	L Near	 000000AB _TEXT	
  validate . . . . . . . . . . .	L Near	 000000D8 _TEXT	
  err  . . . . . . . . . . . . .	L Near	 000000E3 _TEXT	
  goodByte . . . . . . . . . . .	L Near	 000000F2 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sumArr . . . . . . . . . . . . .	P Near	 00000177 _TEXT	Length= 00000030 Public STDCALL
  total  . . . . . . . . . . . .	DWord	 bp - 00000004
  addEle . . . . . . . . . . . .	L Near	 00000190 _TEXT	
writeVal . . . . . . . . . . . .	P Near	 000001A7 _TEXT	Length= 0000005B Public STDCALL
  tempArr  . . . . . . . . . . .	Byte	 bp - 00000032
  divLoop  . . . . . . . . . . .	L Near	 000001D3 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HICHAR . . . . . . . . . . . . .	Number	 00000039h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOCHAR . . . . . . . . . . . . .	Number	 00000030h   
MAX  . . . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrAvg . . . . . . . . . . . . .	DWord	 00000030 _DATA	
arrSum . . . . . . . . . . . . .	DWord	 0000002C _DATA	
avg  . . . . . . . . . . . . . .	Byte	 0000023C _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bye  . . . . . . . . . . . . . .	Byte	 0000024D _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display  . . . . . . . . . . . .	Byte	 000001F7 _DATA	
error  . . . . . . . . . . . . .	Byte	 000001AD _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
index  . . . . . . . . . . . . .	DWord	 00000028 _DATA	
instruct . . . . . . . . . . . .	Byte	 00000098 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000034 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
prompt . . . . . . . . . . . . .	Byte	 0000018B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 0000021B _DATA	
sum  . . . . . . . . . . . . . .	Byte	 0000021E _DATA	
valArray . . . . . . . . . . . .	DWord	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
